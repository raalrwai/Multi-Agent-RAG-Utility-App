import os
import streamlit as st
from dotenv import load_dotenv
from pinecone import Pinecone

import rag
from manager_agent import Manager_Agent

load_dotenv()

PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT")
PINECONE_INDEX_NAME = "retrieval-augmented-generation"

pc = Pinecone(api_key=PINECONE_API_KEY, environment=PINECONE_ENVIRONMENT)
index = pc.Index(PINECONE_INDEX_NAME)

manager = Manager_Agent()


def main():
    st.set_page_config(page_title="Electricity Bills Visual QA", layout="wide")

    with st.sidebar:
        st.header("Electricity Bills Visual QA")
        st.markdown("""
        Upload your **electricity bill PDF** and chat with it.  
        The app will extract, embed, and answer your questions naturally.
        """)
        pdf_upload = st.file_uploader("Upload PDF file", type="pdf")
        has_bill = False

        if pdf_upload:
            rag.file_to_upsert(pdf_upload)
            has_bill = True
            st.success("Bill uploaded and processed!")

        user_name = st.text_input("Full Name:")

    st.title("Chat with Your Bill")

    if "messages" not in st.session_state:
        st.session_state.messages = []

    chat_container = st.container()
    for message in st.session_state.messages:
        with chat_container:
            with st.chat_message(message["role"]):
                st.write(message["content"])
                if message.get("source"):
                    st.caption(f"Response generated by: {message['source']}")

    user_query = st.chat_input("Ask a question or say hi...")

    if user_query and user_query.strip():
        st.session_state.messages.append({"role": "user", "content": user_query})

        with st.spinner("Thinking..."):
            result = manager.handle_query(
                user_query=user_query,
                user_name=user_name,
                has_bill=has_bill
            )

        if result:
            st.session_state.messages.append({
                "role": "assistant",
                "content": result["response"],
                "source": result.get("source")
            })

        st.rerun()


if __name__ == "__main__":
    main()
