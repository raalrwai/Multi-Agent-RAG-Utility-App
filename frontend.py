import asyncio
import os
import sys

import streamlit as st
from dotenv import load_dotenv
from pinecone import Pinecone

import utility_functions.rag as rag
import utility_functions.log_generator as log_gen
from our_agents.manager_agent import Manager_Agent

from openai import OpenAI
from agents import SQLiteSession

load_dotenv()

PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT")
PINECONE_INDEX_NAME = "retrieval-augmented-generation"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

pc = Pinecone(api_key=PINECONE_API_KEY, environment=PINECONE_ENVIRONMENT)
index = pc.Index(PINECONE_INDEX_NAME)

manager = Manager_Agent()

@st.cache_resource
def make_session(name):
    print("SESSION MADE")
    session_dir = os.path.join(os.getcwd(), 'sessions/')
    if not os.path.exists(session_dir):
        os.mkdir(session_dir)
    return SQLiteSession(name, os.path.join(session_dir,'db.sqlite'))
        
# saved_stdout = sys.stdout
saved_stdout = log_gen.start_log()
async def main(): 
    st.set_page_config(page_title="Electricity Bills Visual QA", layout="wide")

    with st.sidebar:
        st.header("Electricity Bills Visual QA")
        st.markdown("""
        Upload your **electricity bill PDF** and chat with it.  
        The app will extract, embed, and answer your questions naturally.
        """)
        pdf_upload = st.file_uploader("Upload PDF file", type="pdf")
        has_bill = False

        if pdf_upload:
            rag.file_to_upsert(pdf_upload)
            has_bill = True
            st.success("Bill uploaded and processed!")

        user_name = st.text_input("Full Name:")

    st.title("Chat with Your Bill")

    if "messages" not in st.session_state:
        st.session_state.messages = []

    chat_container = st.container()
    for message in st.session_state.messages:
        with chat_container:
            with st.chat_message(message["role"]):
                st.write(message["content"])
                if message.get("source"):
                    st.caption(f"Response generated by: {message['source']}")

    user_query = st.chat_input("Ask a question or say hi...")

    if user_query and user_query.strip():
        st.session_state.messages.append({"role": "user", "content": user_query})
        session = make_session(user_name)
        print(f'[{user_name}] ', user_query)

        with st.spinner("Thinking..."):
            result = await manager.handle_query(
                user_query=user_query,
                user_name=user_name,
                has_bill=has_bill,
                session=session
            )

        if result:
            st.session_state.messages.append({
                "role": "assistant",
                "content": result["response"],
                "source": result.get("source")
            })

        st.rerun()

def get_or_create_event_loop():
    try:
        return asyncio.get_event_loop()
    except RuntimeError as e:
        if 'There is no current event loop' in str(e):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            return loop
        else:
            raise

if __name__ == "__main__":
    loop = get_or_create_event_loop()
    loop.run_until_complete(main())
